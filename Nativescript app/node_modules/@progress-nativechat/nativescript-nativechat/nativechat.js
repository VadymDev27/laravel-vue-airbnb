"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var grid_layout_1 = require("tns-core-modules/ui/layouts/grid-layout");
var web_view_1 = require("tns-core-modules/ui/web-view");
var platform_1 = require("tns-core-modules/platform");
var observable_1 = require("tns-core-modules/data/observable/observable");
var NATIVECHAT_ID = "kcChatWindow";
var NATIVECHAT_CONTAINER_ID = "chatbotContainer";
var NATIVECHAT_VERSION = "1.31.0";
var NativeChat = (function (_super) {
    __extends(NativeChat, _super);
    function NativeChat() {
        var _this = _super.call(this) || this;
        _this._configChangeListener = _this.configPropertyChange.bind(_this);
        _this.webChatConfig = observable_1.fromObject({ url: '' });
        _this._webView = new web_view_1.WebView();
        var webViewBindingOptions = {
            sourceProperty: "url",
            targetProperty: "src",
            twoWay: false
        };
        _this._webView.bind(webViewBindingOptions, _this.webChatConfig);
        _this._webView.on('loadFinished', _this.webViewLoaded);
        _this.addChild(_this._webView);
        return _this;
    }
    Object.defineProperty(NativeChat.prototype, "config", {
        get: function () {
            return this._config;
        },
        set: function (value) {
            this.removeConfigChangesListeners(this._config);
            this._config = value;
            this.updateNativeChatConfig();
            this.handleConfigChanges(this._config);
        },
        enumerable: true,
        configurable: true
    });
    NativeChat.prototype.webViewLoaded = function (args) {
        var webview = args.object;
        if (platform_1.isAndroid) {
            var settings = webview.android.getSettings();
            settings.setDomStorageEnabled(true);
            settings.setDisplayZoomControls(false);
        }
    };
    NativeChat.prototype.configPropertyChange = function (data) {
        this.updateNativeChatConfig();
    };
    NativeChat.prototype.updateNativeChatConfig = function () {
        var config = this._config;
        var botId = config && config.bot && config.bot.id;
        var channel = config && config.channel;
        var channelId = channel && channel.id;
        var channelToken = channel && channel.token;
        if (botId && channelId && channelToken) {
            var chatbotSettings = {
                id: NATIVECHAT_ID,
                origin: "",
                display: {
                    mode: "inline",
                    containerId: NATIVECHAT_CONTAINER_ID
                },
                chat: config
            };
            var data = "<!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <title>Progress NativeChat</title>\n            <script src=\"https://web-chat.nativechat.com/" + NATIVECHAT_VERSION + "/sdk/nativechat.js\"></script>\n            <link href=\"https://web-chat.nativechat.com/" + NATIVECHAT_VERSION + "/sdk/nativechat.css\" rel=\"stylesheet\" type=\"text/css\">\n            <style>\n              html, body { height: 100%; margin: 0; padding: 0; }\n              #" + NATIVECHAT_CONTAINER_ID + " { width: 100%; height: 100%; }\n            </style>\n        </head>\n        <body>\n          <div id=\"" + NATIVECHAT_CONTAINER_ID + "\"></div>\n          <script>\n            window.NativeChat.load(" + JSON.stringify(chatbotSettings) + ");\n          </script>\n        </body>\n        </html>";
            this.webChatConfig.set('url', data);
        }
        else {
            this.webChatConfig.set('url', '');
        }
    };
    NativeChat.prototype.handleConfigChanges = function (config) {
        if (!config) {
            return;
        }
        var isObservable = this.isObservable(config);
        this.attachPropertyChange(config);
        this.attachPropertyChange(isObservable ? config.get("defaultLocation") : config.defaultLocation);
        this.attachPropertyChange(isObservable ? config.get("user") : config.user);
        var session = isObservable ? config.get("session") : config.session;
        var isSessionObservable = this.isObservable(session);
        this.attachPropertyChange(session);
        this.attachPropertyChange(isSessionObservable ? session.get("context") : session.context);
    };
    NativeChat.prototype.attachPropertyChange = function (config) {
        if (this.isObservable(config)) {
            config.on(observable_1.Observable.propertyChangeEvent, this._configChangeListener);
        }
    };
    NativeChat.prototype.removeConfigChangesListeners = function (config) {
        if (!config) {
            return;
        }
        var isObservable = this.isObservable(config);
        this.removePropertyChange(config);
        this.removePropertyChange(isObservable ? config.get("defaultLocation") : config.defaultLocation);
        this.removePropertyChange(isObservable ? config.get("user") : config.user);
        var session = isObservable ? config.get("session") : config.session;
        var isSessionObservable = this.isObservable(session);
        this.removePropertyChange(session);
        this.removePropertyChange(isSessionObservable ? session.get("context") : session.context);
    };
    NativeChat.prototype.removePropertyChange = function (config) {
        if (this.isObservable(config)) {
            config.off(observable_1.Observable.propertyChangeEvent, this._configChangeListener);
        }
    };
    NativeChat.prototype.isObservable = function (objectToTest) {
        return objectToTest && objectToTest.constructor && objectToTest.constructor.prototype instanceof observable_1.Observable;
    };
    return NativeChat;
}(grid_layout_1.GridLayout));
exports.NativeChat = NativeChat;
//# sourceMappingURL=nativechat.js.map