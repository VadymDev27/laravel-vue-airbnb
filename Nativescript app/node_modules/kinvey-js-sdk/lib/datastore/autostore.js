"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var query_1 = require("../query");
var network_1 = require("../errors/network");
var kinvey_1 = require("../errors/kinvey");
var cache_1 = require("./cache");
var networkstore_1 = require("./networkstore");
var cachestore_1 = require("./cachestore");
var AutoStore = /** @class */ (function (_super) {
    __extends(AutoStore, _super);
    function AutoStore(collectionName, options) {
        if (options === void 0) { options = { tag: undefined, useDeltaSet: false, useAutoPagination: false }; }
        return _super.call(this, collectionName, options) || this;
    }
    AutoStore.prototype.find = function (query, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var cache, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cache = new cache_1.DataStoreCache(this.collectionName, this.tag);
                        if (query && !(query instanceof query_1.Query)) {
                            throw new kinvey_1.KinveyError('query is not an instance of the Query class.');
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.pull(query, options)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, cache.find(query)];
                    case 3:
                        error_1 = _a.sent();
                        if (error_1 instanceof network_1.NetworkError) {
                            return [2 /*return*/, cache.find(query)];
                        }
                        throw error_1;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    AutoStore.prototype.count = function (query, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var network, count, error_2, cache;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (query && !(query instanceof query_1.Query)) {
                            throw new kinvey_1.KinveyError('query is not an instance of the Query class.');
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        network = new networkstore_1.NetworkStore(this.collectionName);
                        return [4 /*yield*/, network.count(query, options).toPromise()];
                    case 2:
                        count = _a.sent();
                        return [2 /*return*/, count];
                    case 3:
                        error_2 = _a.sent();
                        if (error_2 instanceof network_1.NetworkError) {
                            cache = new cache_1.DataStoreCache(this.collectionName, this.tag);
                            return [2 /*return*/, cache.count(query)];
                        }
                        throw error_2;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    AutoStore.prototype.group = function (aggregation, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var network, result, error_3, cache;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(aggregation instanceof query_1.Query)) {
                            throw new kinvey_1.KinveyError('aggregation is not an instance of the Aggregation class.');
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        network = new networkstore_1.NetworkStore(this.collectionName);
                        return [4 /*yield*/, network.group(aggregation, options).toPromise()];
                    case 2:
                        result = _a.sent();
                        return [2 /*return*/, result];
                    case 3:
                        error_3 = _a.sent();
                        if (error_3 instanceof network_1.NetworkError) {
                            cache = new cache_1.DataStoreCache(this.collectionName, this.tag);
                            return [2 /*return*/, cache.group(aggregation)];
                        }
                        throw error_3;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    AutoStore.prototype.findById = function (id, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var cache, doc, error_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cache = new cache_1.DataStoreCache(this.collectionName, this.tag);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.pullById(id, options)];
                    case 2:
                        doc = _a.sent();
                        return [2 /*return*/, doc];
                    case 3:
                        error_4 = _a.sent();
                        if (error_4 instanceof network_1.NetworkError) {
                            return [2 /*return*/, cache.findById(id)];
                        }
                        throw error_4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    return AutoStore;
}(cachestore_1.CacheStore));
exports.AutoStore = AutoStore;
//# sourceMappingURL=autostore.js.map