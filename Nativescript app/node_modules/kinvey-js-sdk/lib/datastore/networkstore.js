"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var isArray_1 = __importDefault(require("lodash/isArray"));
var cloneDeep_1 = __importDefault(require("lodash/cloneDeep"));
var rxjs_1 = require("rxjs");
var device_1 = require("../device");
var aggregation_1 = require("../aggregation");
var query_1 = require("../query");
var kinvey_1 = require("../errors/kinvey");
var http_1 = require("../http");
var kinvey_2 = require("../kinvey");
var live_1 = require("../live");
var kmd_1 = require("../kmd");
function createRequest(method, url, body) {
    return new http_1.KinveyHttpRequest({
        method: method,
        auth: http_1.KinveyHttpAuth.SessionOrMaster,
        url: url,
        body: body
    });
}
exports.createRequest = createRequest;
var NetworkStore = /** @class */ (function () {
    function NetworkStore(collectionName) {
        this.collectionName = collectionName;
    }
    Object.defineProperty(NetworkStore.prototype, "collection", {
        get: function () {
            return this.collectionName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NetworkStore.prototype, "pathname", {
        get: function () {
            return "/" + this.collectionName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NetworkStore.prototype, "channelName", {
        get: function () {
            return kinvey_2.getAppKey() + ".c-" + this.collectionName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NetworkStore.prototype, "personalChannelName", {
        get: function () {
            var session = http_1.getSession();
            if (session) {
                return this.channelName + ".u-" + session._id;
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    NetworkStore.prototype.find = function (query, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        var stream = rxjs_1.Observable.create(function (observer) { return __awaiter(_this, void 0, void 0, function () {
            var _a, rawResponse, timeout, properties, trace, skipBL, kinveyFileTTL, kinveyFileTLS, queryObject, url, request, response, error_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 3]);
                        if (query && !(query instanceof query_1.Query)) {
                            throw new kinvey_1.KinveyError('Invalid query. It must be an instance of the Query class.');
                        }
                        _a = options.rawResponse, rawResponse = _a === void 0 ? false : _a, timeout = options.timeout, properties = options.properties, trace = options.trace, skipBL = options.skipBL, kinveyFileTTL = options.kinveyFileTTL, kinveyFileTLS = options.kinveyFileTLS;
                        queryObject = Object.assign({}, query ? query.toQueryObject() : {}, { kinveyfile_ttl: kinveyFileTTL, kinveyfile_tls: kinveyFileTLS });
                        url = http_1.formatKinveyBaasUrl(http_1.KinveyBaasNamespace.AppData, this.pathname, queryObject);
                        request = createRequest(http_1.HttpRequestMethod.GET, url);
                        request.headers.setCustomRequestProperties(properties);
                        request.timeout = timeout;
                        return [4 /*yield*/, request.execute()];
                    case 1:
                        response = _b.sent();
                        if (rawResponse === true) {
                            observer.next(response);
                        }
                        else {
                            observer.next(response.data);
                        }
                        observer.complete();
                        return [3 /*break*/, 3];
                    case 2:
                        error_1 = _b.sent();
                        observer.error(error_1);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        }); });
        return stream;
    };
    NetworkStore.prototype.count = function (query, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        var stream = rxjs_1.Observable.create(function (observer) { return __awaiter(_this, void 0, void 0, function () {
            var _a, rawResponse, timeout, properties, trace, skipBL, queryObject, url, request, response, error_2;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 3]);
                        if (query && !(query instanceof query_1.Query)) {
                            throw new kinvey_1.KinveyError('Invalid query. It must be an instance of the Query class.');
                        }
                        _a = options.rawResponse, rawResponse = _a === void 0 ? false : _a, timeout = options.timeout, properties = options.properties, trace = options.trace, skipBL = options.skipBL;
                        queryObject = Object.assign({}, query ? query.toQueryObject() : {}, {});
                        url = http_1.formatKinveyBaasUrl(http_1.KinveyBaasNamespace.AppData, this.pathname + "/_count", queryObject);
                        request = createRequest(http_1.HttpRequestMethod.GET, url);
                        request.headers.setCustomRequestProperties(properties);
                        request.timeout = timeout;
                        return [4 /*yield*/, request.execute()];
                    case 1:
                        response = _b.sent();
                        if (rawResponse === true) {
                            observer.next(response);
                        }
                        else {
                            observer.next(response.data.count);
                        }
                        observer.complete();
                        return [3 /*break*/, 3];
                    case 2:
                        error_2 = _b.sent();
                        observer.error(error_2);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        }); });
        return stream;
    };
    NetworkStore.prototype.group = function (aggregation, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        var stream = rxjs_1.Observable.create(function (observer) { return __awaiter(_this, void 0, void 0, function () {
            var _a, rawResponse, timeout, properties, trace, skipBL, queryObject, url, request, response, error_3;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 3]);
                        if (!(aggregation instanceof aggregation_1.Aggregation)) {
                            throw new kinvey_1.KinveyError('Invalid aggregation. It must be an instance of the Aggregation class.');
                        }
                        _a = options.rawResponse, rawResponse = _a === void 0 ? false : _a, timeout = options.timeout, properties = options.properties, trace = options.trace, skipBL = options.skipBL;
                        queryObject = {};
                        url = http_1.formatKinveyBaasUrl(http_1.KinveyBaasNamespace.AppData, this.pathname + "/_group", queryObject);
                        request = createRequest(http_1.HttpRequestMethod.POST, url, aggregation.toPlainObject());
                        request.headers.setCustomRequestProperties(properties);
                        request.timeout = timeout;
                        return [4 /*yield*/, request.execute()];
                    case 1:
                        response = _b.sent();
                        if (rawResponse === true) {
                            observer.next(response);
                        }
                        else {
                            observer.next(response.data);
                        }
                        observer.complete();
                        return [3 /*break*/, 3];
                    case 2:
                        error_3 = _b.sent();
                        observer.error(error_3);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        }); });
        return stream;
    };
    NetworkStore.prototype.findById = function (id, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        var stream = rxjs_1.Observable.create(function (observer) { return __awaiter(_this, void 0, void 0, function () {
            var _a, rawResponse, timeout, properties, trace, skipBL, kinveyFileTTL, kinveyFileTLS, queryObject, url, request, response, error_4;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 4, , 5]);
                        if (!id) return [3 /*break*/, 2];
                        _a = options.rawResponse, rawResponse = _a === void 0 ? false : _a, timeout = options.timeout, properties = options.properties, trace = options.trace, skipBL = options.skipBL, kinveyFileTTL = options.kinveyFileTTL, kinveyFileTLS = options.kinveyFileTLS;
                        queryObject = { kinveyfile_ttl: kinveyFileTTL, kinveyfile_tls: kinveyFileTLS };
                        url = http_1.formatKinveyBaasUrl(http_1.KinveyBaasNamespace.AppData, this.pathname + "/" + id, queryObject);
                        request = createRequest(http_1.HttpRequestMethod.GET, url);
                        request.headers.setCustomRequestProperties(properties);
                        request.timeout = timeout;
                        return [4 /*yield*/, request.execute()];
                    case 1:
                        response = _b.sent();
                        if (rawResponse === true) {
                            observer.next(response);
                        }
                        else {
                            observer.next(response.data);
                        }
                        return [3 /*break*/, 3];
                    case 2:
                        observer.next(undefined);
                        _b.label = 3;
                    case 3:
                        observer.complete();
                        return [3 /*break*/, 5];
                    case 4:
                        error_4 = _b.sent();
                        observer.error(error_4);
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        }); });
        return stream;
    };
    NetworkStore.prototype.create = function (docs, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var batchSize, apiVersion, i_1, batchCreate_1, _a, rawResponse, timeout, properties, trace, skipBL, queryObject, url, request, response;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        batchSize = 100;
                        apiVersion = kinvey_2.getApiVersion();
                        if (apiVersion !== 5 && isArray_1.default(docs)) {
                            throw new kinvey_1.KinveyError('Unable to create an array of entities. Please create entities one by one.');
                        }
                        if (isArray_1.default(docs) && docs.length > batchSize) {
                            i_1 = 0;
                            batchCreate_1 = function (createResults) {
                                if (createResults === void 0) { createResults = []; }
                                return __awaiter(_this, void 0, void 0, function () {
                                    var batch, result;
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0:
                                                if (i_1 >= docs.length) {
                                                    return [2 /*return*/, createResults];
                                                }
                                                batch = docs.slice(i_1, i_1 + batchSize);
                                                i_1 += batchSize;
                                                return [4 /*yield*/, this.create(batch, options)];
                                            case 1:
                                                result = _a.sent();
                                                return [2 /*return*/, batchCreate_1(createResults.concat(result))];
                                        }
                                    });
                                });
                            };
                            return [2 /*return*/, batchCreate_1()];
                        }
                        _a = options.rawResponse, rawResponse = _a === void 0 ? false : _a, timeout = options.timeout, properties = options.properties, trace = options.trace, skipBL = options.skipBL;
                        queryObject = {};
                        url = http_1.formatKinveyBaasUrl(http_1.KinveyBaasNamespace.AppData, this.pathname, queryObject);
                        request = createRequest(http_1.HttpRequestMethod.POST, url, docs);
                        request.headers.setCustomRequestProperties(properties);
                        request.timeout = timeout;
                        return [4 /*yield*/, request.execute()];
                    case 1:
                        response = _b.sent();
                        if (rawResponse === true) {
                            return [2 /*return*/, response];
                        }
                        return [2 /*return*/, response.data];
                }
            });
        });
    };
    NetworkStore.prototype.update = function (doc, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var _a, rawResponse, timeout, properties, trace, skipBL, queryObject, url, request, response;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (isArray_1.default(doc)) {
                            throw new kinvey_1.KinveyError('Unable to update an array of entities. Please update entities one by one.');
                        }
                        if (!doc._id) {
                            throw new kinvey_1.KinveyError('The entity provided does not contain an _id. An _id is required to update the entity.');
                        }
                        _a = options.rawResponse, rawResponse = _a === void 0 ? false : _a, timeout = options.timeout, properties = options.properties, trace = options.trace, skipBL = options.skipBL;
                        queryObject = {};
                        url = http_1.formatKinveyBaasUrl(http_1.KinveyBaasNamespace.AppData, this.pathname + "/" + doc._id, queryObject);
                        request = createRequest(http_1.HttpRequestMethod.PUT, url, doc);
                        request.headers.setCustomRequestProperties(properties);
                        request.timeout = timeout;
                        return [4 /*yield*/, request.execute()];
                    case 1:
                        response = _b.sent();
                        if (rawResponse === true) {
                            return [2 /*return*/, response];
                        }
                        return [2 /*return*/, response.data];
                }
            });
        });
    };
    NetworkStore.prototype.save = function (docs, options) {
        if (!isArray_1.default(docs)) {
            var kmd = new kmd_1.Kmd(cloneDeep_1.default(docs));
            if (docs._id && !kmd.isLocal()) {
                return this.update(docs, options);
            }
        }
        return this.create(docs, options);
    };
    NetworkStore.prototype.remove = function (query, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var _a, rawResponse, timeout, properties, trace, skipBL, queryObject, url, request, response;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!query) {
                            throw new kinvey_1.KinveyError('A query must be provided to remove entities.');
                        }
                        if (!(query instanceof query_1.Query)) {
                            throw new kinvey_1.KinveyError('Invalid query. It must be an instance of the Query class.');
                        }
                        _a = options.rawResponse, rawResponse = _a === void 0 ? false : _a, timeout = options.timeout, properties = options.properties, trace = options.trace, skipBL = options.skipBL;
                        queryObject = Object.assign({}, query ? query.toQueryObject() : {});
                        url = http_1.formatKinveyBaasUrl(http_1.KinveyBaasNamespace.AppData, this.pathname, queryObject);
                        request = createRequest(http_1.HttpRequestMethod.DELETE, url);
                        request.headers.setCustomRequestProperties(properties);
                        request.timeout = timeout;
                        return [4 /*yield*/, request.execute()];
                    case 1:
                        response = _b.sent();
                        if (rawResponse === true) {
                            return [2 /*return*/, response];
                        }
                        return [2 /*return*/, response.data];
                }
            });
        });
    };
    NetworkStore.prototype.removeById = function (id, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var _a, rawResponse, timeout, properties, trace, skipBL, queryObject, url, request, response;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = options.rawResponse, rawResponse = _a === void 0 ? false : _a, timeout = options.timeout, properties = options.properties, trace = options.trace, skipBL = options.skipBL;
                        queryObject = {};
                        url = http_1.formatKinveyBaasUrl(http_1.KinveyBaasNamespace.AppData, this.pathname + "/" + id, queryObject);
                        request = createRequest(http_1.HttpRequestMethod.DELETE, url);
                        request.headers.setCustomRequestProperties(properties);
                        request.timeout = timeout;
                        return [4 /*yield*/, request.execute()];
                    case 1:
                        response = _b.sent();
                        if (rawResponse === true) {
                            return [2 /*return*/, response];
                        }
                        return [2 /*return*/, response.data];
                }
            });
        });
    };
    NetworkStore.prototype.subscribe = function (receiver, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var timeout, properties, trace, skipBL, deviceId, url, request;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        timeout = options.timeout, properties = options.properties, trace = options.trace, skipBL = options.skipBL;
                        return [4 /*yield*/, device_1.getDeviceId()];
                    case 1:
                        deviceId = _a.sent();
                        url = http_1.formatKinveyBaasUrl(http_1.KinveyBaasNamespace.AppData, this.pathname + "/_subscribe");
                        request = createRequest(http_1.HttpRequestMethod.POST, url, { deviceId: deviceId });
                        request.headers.setCustomRequestProperties(properties);
                        request.timeout = timeout;
                        return [4 /*yield*/, request.execute()];
                    case 2:
                        _a.sent();
                        live_1.subscribeToChannel(this.channelName, receiver);
                        if (this.personalChannelName) {
                            live_1.subscribeToChannel(this.personalChannelName, receiver);
                        }
                        return [2 /*return*/, true];
                }
            });
        });
    };
    NetworkStore.prototype.unsubscribe = function (options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var timeout, properties, trace, skipBL, deviceId, url, request;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        timeout = options.timeout, properties = options.properties, trace = options.trace, skipBL = options.skipBL;
                        return [4 /*yield*/, device_1.getDeviceId()];
                    case 1:
                        deviceId = _a.sent();
                        url = http_1.formatKinveyBaasUrl(http_1.KinveyBaasNamespace.AppData, this.pathname + "/_unsubscribe");
                        request = createRequest(http_1.HttpRequestMethod.POST, url, { deviceId: deviceId });
                        request.headers.setCustomRequestProperties(properties);
                        request.timeout = timeout;
                        return [4 /*yield*/, request.execute()];
                    case 2:
                        _a.sent();
                        live_1.unsubscribeFromChannel(this.channelName);
                        live_1.unsubscribeFromChannel(this.personalChannelName);
                        return [2 /*return*/, true];
                }
            });
        });
    };
    return NetworkStore;
}());
exports.NetworkStore = NetworkStore;
//# sourceMappingURL=networkstore.js.map