"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var isArray_1 = __importDefault(require("lodash/isArray"));
var p_queue_1 = __importDefault(require("p-queue"));
var config_1 = require("./config");
var query_1 = require("./query");
var aggregation_1 = require("./aggregation");
var kinvey_1 = require("./errors/kinvey");
var http_1 = require("./http");
var queue = new p_queue_1.default({ concurrency: 1 });
function generateId(length) {
    if (length === void 0) { length = 24; }
    var chars = 'abcdef0123456789';
    var id = '';
    for (var i = 0, j = chars.length; i < length; i += 1) {
        var pos = Math.floor(Math.random() * j);
        id += chars.substring(pos, pos + 1);
    }
    return id;
}
var Storage = /** @class */ (function () {
    function Storage(dbName, collectionName) {
        this.dbName = dbName;
        this.collectionName = collectionName;
    }
    Object.defineProperty(Storage.prototype, "storageAdapter", {
        get: function () {
            return config_1.getConfig(config_1.ConfigKey.StorageAdapter);
        },
        enumerable: true,
        configurable: true
    });
    Storage.prototype.find = function (query) {
        var _this = this;
        return queue.add(function () { return __awaiter(_this, void 0, void 0, function () {
            var docs;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (query && !(query instanceof query_1.Query)) {
                            throw new kinvey_1.KinveyError('Invalid query. It must be an instance of the Query class.');
                        }
                        return [4 /*yield*/, this.storageAdapter.find(this.dbName, this.collectionName)];
                    case 1:
                        docs = _a.sent();
                        if (docs.length > 0 && query) {
                            return [2 /*return*/, query.process(docs)];
                        }
                        return [2 /*return*/, docs];
                }
            });
        }); });
    };
    Storage.prototype.group = function (aggregation) {
        return __awaiter(this, void 0, void 0, function () {
            var docs;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(aggregation instanceof aggregation_1.Aggregation)) {
                            throw new kinvey_1.KinveyError('Invalid aggregation. It must be an instance of the Aggregation class.');
                        }
                        return [4 /*yield*/, this.find()];
                    case 1:
                        docs = _a.sent();
                        return [2 /*return*/, aggregation.process(docs)];
                }
            });
        });
    };
    Storage.prototype.count = function (query) {
        return __awaiter(this, void 0, void 0, function () {
            var docs;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!query) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.find(query)];
                    case 1:
                        docs = _a.sent();
                        return [2 /*return*/, docs.length];
                    case 2: return [2 /*return*/, queue.add(function () { return _this.storageAdapter.count(_this.dbName, _this.collectionName); })];
                }
            });
        });
    };
    Storage.prototype.findById = function (id) {
        var _this = this;
        return queue.add(function () { return _this.storageAdapter.findById(_this.dbName, _this.collectionName, id); });
    };
    Storage.prototype.save = function (docs) {
        var _this = this;
        return queue.add(function () { return __awaiter(_this, void 0, void 0, function () {
            var docsToSave, singular;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        docsToSave = docs;
                        singular = false;
                        if (!docs) {
                            return [2 /*return*/, null];
                        }
                        if (!isArray_1.default(docs)) {
                            singular = true;
                            docsToSave = [docs];
                        }
                        // Clone the docs
                        docsToSave = docsToSave.slice(0, docsToSave.length);
                        if (!(docsToSave.length > 0)) return [3 /*break*/, 2];
                        docsToSave = docsToSave.map(function (doc) {
                            if (!doc._id) {
                                return Object.assign({}, {
                                    _id: generateId(),
                                    _kmd: Object.assign({}, doc._kmd, { local: true })
                                }, doc);
                            }
                            return doc;
                        });
                        return [4 /*yield*/, this.storageAdapter.save(this.dbName, this.collectionName, docsToSave)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, singular ? docsToSave.shift() : docsToSave];
                    case 2: return [2 /*return*/, docs];
                }
            });
        }); });
    };
    Storage.prototype.remove = function (query) {
        return __awaiter(this, void 0, void 0, function () {
            var docs, results;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.find(query)];
                    case 1:
                        docs = _a.sent();
                        if (!query) return [3 /*break*/, 3];
                        return [4 /*yield*/, Promise.all(docs.map(function (doc) { return _this.removeById(doc._id); }))];
                    case 2:
                        results = _a.sent();
                        return [2 /*return*/, results.reduce(function (totalCount, count) { return totalCount + count; }, 0)];
                    case 3: return [4 /*yield*/, this.clear()];
                    case 4:
                        _a.sent();
                        return [2 /*return*/, docs.length];
                }
            });
        });
    };
    Storage.prototype.removeById = function (id) {
        var _this = this;
        return queue.add(function () { return _this.storageAdapter.removeById(_this.dbName, _this.collectionName, id); });
    };
    Storage.prototype.clear = function () {
        var _this = this;
        return queue.add(function () { return _this.storageAdapter.clear(_this.dbName, _this.collectionName); });
    };
    Storage.clear = function (dbName) {
        var storageAdapter = config_1.getConfig(config_1.ConfigKey.StorageAdapter);
        var exclude = [http_1.getKey()];
        return queue.add(function () { return storageAdapter.clearDatabase(dbName, exclude); });
    };
    return Storage;
}());
exports.Storage = Storage;
//# sourceMappingURL=storage.js.map