"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var isArray_1 = __importDefault(require("lodash/isArray"));
var acl_1 = require("../acl");
var kmd_1 = require("../kmd");
var device_1 = require("../device");
var http_1 = require("../http");
var kinvey_1 = require("../errors/kinvey");
var cache_1 = require("../datastore/cache");
var live_1 = require("../live");
var log_1 = require("../log");
var utils_1 = require("./utils");
var signup_1 = require("./signup");
var User = /** @class */ (function () {
    function User(data) {
        if (data === void 0) { data = {}; }
        this.data = data;
    }
    Object.defineProperty(User.prototype, "_id", {
        get: function () {
            if (this.data) {
                return this.data._id;
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(User.prototype, "_acl", {
        get: function () {
            if (this.data) {
                return new acl_1.Acl(this.data);
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(User.prototype, "_kmd", {
        get: function () {
            if (this.data) {
                return new kmd_1.Kmd(this.data);
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(User.prototype, "metadata", {
        get: function () {
            return this._kmd;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(User.prototype, "authtoken", {
        get: function () {
            var kmd = this._kmd;
            if (kmd) {
                return kmd.authtoken;
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(User.prototype, "_socialIdentity", {
        get: function () {
            return this.data._socialIdentity;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(User.prototype, "username", {
        get: function () {
            if (this.data) {
                return this.data.username;
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(User.prototype, "email", {
        get: function () {
            if (this.data) {
                return this.data.email;
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    User.prototype.isActive = function () {
        var activeUser = http_1.getSession();
        if (activeUser && activeUser._id === this._id) {
            return true;
        }
        return false;
    };
    User.prototype.isEmailVerified = function () {
        var metadata = this.metadata;
        if (metadata) {
            return metadata.isEmailConfirmed();
        }
        return false;
    };
    User.prototype.signup = function (options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, signup_1.signup(this.data, options)];
            });
        });
    };
    User.prototype.me = function (options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var request, response, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        request = new http_1.KinveyHttpRequest({
                            method: http_1.HttpRequestMethod.GET,
                            auth: http_1.KinveyHttpAuth.Session,
                            url: http_1.formatKinveyBaasUrl(http_1.KinveyBaasNamespace.User, '/_me'),
                            timeout: options.timeout
                        });
                        return [4 /*yield*/, request.execute()];
                    case 1:
                        response = _a.sent();
                        data = response.data;
                        // Remove sensitive data
                        delete data.password;
                        // Merge _socialIdentity
                        if (data._socialIdentity) {
                            data._socialIdentity = utils_1.mergeSocialIdentity(this._socialIdentity, data._socialIdentity);
                        }
                        // Update the active session
                        if (this.isActive()) {
                            http_1.setSession(data);
                        }
                        this.data = data;
                        return [2 /*return*/, this];
                }
            });
        });
    };
    User.prototype.update = function (data, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var body, request, response, updatedData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        body = Object.assign({}, this.data, data);
                        if (!data) {
                            throw new kinvey_1.KinveyError('No user was provided to be updated.');
                        }
                        if (isArray_1.default(data)) {
                            throw new kinvey_1.KinveyError('Only one user can be updated at one time.');
                        }
                        if (!body._id) {
                            throw new kinvey_1.KinveyError('User must have an _id.');
                        }
                        request = new http_1.KinveyHttpRequest({
                            method: http_1.HttpRequestMethod.PUT,
                            auth: http_1.KinveyHttpAuth.SessionOrMaster,
                            url: http_1.formatKinveyBaasUrl(http_1.KinveyBaasNamespace.User, "/" + this._id),
                            body: body,
                            timeout: options.timeout
                        });
                        return [4 /*yield*/, request.execute()];
                    case 1:
                        response = _a.sent();
                        updatedData = response.data;
                        // Remove sensitive data
                        delete updatedData.password;
                        // Merge _socialIdentity
                        if (updatedData._socialIdentity) {
                            updatedData._socialIdentity = utils_1.mergeSocialIdentity(this._socialIdentity, updatedData._socialIdentity);
                        }
                        // Update the active session
                        if (this.isActive()) {
                            http_1.setSession(updatedData);
                        }
                        this.data = updatedData;
                        return [2 /*return*/, this];
                }
            });
        });
    };
    User.prototype.registerForLiveService = function (options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var deviceId, request, response, config;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!live_1.isSubscribed()) return [3 /*break*/, 3];
                        return [4 /*yield*/, device_1.getDeviceId()];
                    case 1:
                        deviceId = _a.sent();
                        request = new http_1.KinveyHttpRequest({
                            method: http_1.HttpRequestMethod.POST,
                            auth: http_1.KinveyHttpAuth.Session,
                            url: http_1.formatKinveyBaasUrl(http_1.KinveyBaasNamespace.User, "/" + this._id + "/register-realtime"),
                            body: { deviceId: deviceId },
                            timeout: options.timeout
                        });
                        return [4 /*yield*/, request.execute()];
                    case 2:
                        response = _a.sent();
                        config = Object.assign({}, { authKey: this.authtoken }, response.data);
                        // Subscribe to PubNub
                        live_1.subscribe(config);
                        _a.label = 3;
                    case 3: return [2 /*return*/, true];
                }
            });
        });
    };
    User.prototype.unregisterFromLiveService = function (options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var deviceId, request;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!live_1.isSubscribed()) return [3 /*break*/, 3];
                        // Unsubscribe from PubNub
                        live_1.unsubscribe();
                        return [4 /*yield*/, device_1.getDeviceId()];
                    case 1:
                        deviceId = _a.sent();
                        request = new http_1.KinveyHttpRequest({
                            method: http_1.HttpRequestMethod.POST,
                            auth: http_1.KinveyHttpAuth.Session,
                            url: http_1.formatKinveyBaasUrl(http_1.KinveyBaasNamespace.User, "/" + this._id + "/unregister-realtime"),
                            body: { deviceId: deviceId },
                            timeout: options.timeout
                        });
                        return [4 /*yield*/, request.execute()];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [2 /*return*/, true];
                }
            });
        });
    };
    User.prototype.logout = function (options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var request, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isActive()) return [3 /*break*/, 8];
                        // TODO: unregister push
                        // Unregister from Live Service
                        this.unregisterFromLiveService();
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        request = new http_1.KinveyHttpRequest({
                            method: http_1.HttpRequestMethod.POST,
                            auth: http_1.KinveyHttpAuth.Session,
                            url: http_1.formatKinveyBaasUrl(http_1.KinveyBaasNamespace.User, '/_logout'),
                            timeout: options.timeout
                        });
                        return [4 /*yield*/, request.execute()];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        error_1 = _a.sent();
                        log_1.logger.error('Logout request failed.');
                        log_1.logger.error(error_1.message);
                        return [3 /*break*/, 4];
                    case 4:
                        // Remove the session
                        http_1.removeSession();
                        // Clear cache's
                        return [4 /*yield*/, cache_1.QueryCache.clear()];
                    case 5:
                        // Clear cache's
                        _a.sent();
                        return [4 /*yield*/, cache_1.SyncCache.clear()];
                    case 6:
                        _a.sent();
                        return [4 /*yield*/, cache_1.DataStoreCache.clear()];
                    case 7:
                        _a.sent();
                        _a.label = 8;
                    case 8: return [2 /*return*/, this];
                }
            });
        });
    };
    return User;
}());
exports.User = User;
//# sourceMappingURL=user.js.map