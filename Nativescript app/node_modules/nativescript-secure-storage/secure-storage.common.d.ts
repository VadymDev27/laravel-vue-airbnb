export interface SetOptions {
    service?: string;
    key: string;
    value: string;
}
export interface GetOptions {
    service?: string;
    key: string;
}
export interface RemoveOptions {
    service?: string;
    key: string;
}
export interface RemoveAllOptions {
    service?: string;
}
export declare abstract class SecureStorageCommon {
    protected static IS_FIRST_RUN: string;
    private isFirst;
    constructor();
    abstract get(arg: GetOptions): Promise<any>;
    abstract getSync(arg: GetOptions): any;
    abstract set(arg: SetOptions): Promise<boolean>;
    abstract setSync(arg: SetOptions): boolean;
    abstract remove(arg: RemoveOptions): Promise<boolean>;
    abstract removeSync(arg: RemoveOptions): boolean;
    abstract removeAll(arg?: RemoveAllOptions): Promise<boolean>;
    abstract removeAllSync(arg?: RemoveAllOptions): boolean;
    isFirstRunSync(): boolean;
    isFirstRun(): Promise<boolean>;
    clearAllOnFirstRun(): Promise<boolean>;
    clearAllOnFirstRunSync(): boolean;
}
