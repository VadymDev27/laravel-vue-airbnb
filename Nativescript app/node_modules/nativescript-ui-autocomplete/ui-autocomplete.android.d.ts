import { ObservableArray } from "tns-core-modules/data/observable-array";
import * as commonModule from "./ui-autocomplete.common";
export * from "./ui-autocomplete.common";
export declare namespace knownTemplates {
    const suggestionItemTemplate = "suggestionItemTemplate";
}
export declare class TokenModel extends commonModule.TokenModel {
    private _android;
    constructor(text: string, imageName: any);
    readonly android: com.telerik.widget.autocomplete.TokenModel;
}
export declare class SuggestionView extends commonModule.SuggestionView {
    private _android;
    constructor();
    android: androidx.recyclerview.widget.RecyclerView;
    createNativeView(): any;
    private getNativeBackgroundView;
    protected onSuggestionViewHeightChanged(oldValue: number, newValue: number): void;
    private updateHeight;
}
export declare class RadAutoCompleteTextView extends commonModule.RadAutoCompleteTextView {
    _android: com.telerik.widget.autocomplete.RadAutoCompleteTextView;
    _filteredItems: Array<TokenModel>;
    _selectedTokens: Array<TokenModel>;
    private _androidViewId;
    private _clearButton;
    private _noResultsLabel;
    asyncCall: any;
    constructor();
    readonly clearButton: ClearButton;
    readonly noResultsLabel: NoResultsLabel;
    createNativeView(): any;
    initNativeView(): void;
    disposeNativeView(): void;
    readonly _nativeView: any;
    readonly android: any;
    readonly filteredItems: Array<TokenModel>;
    readonly selectedTokens: Array<TokenModel>;
    resetAutoComplete(): void;
    addToken(token: TokenModel): void;
    insertTokenAtIndex(token: TokenModel, index: number): void;
    removeToken(token: TokenModel): void;
    removeTokenAtIndex(index: number): void;
    removeAllTokens(): void;
    tokens(): java.util.List<com.telerik.widget.autocomplete.TokenView>;
    tokenAtIndex(index: number): com.telerik.widget.autocomplete.TokenView;
    findSuggestions(): void;
    protected onDisplayModeChanged(oldValue: commonModule.AutoCompleteDisplayMode, newValue: commonModule.AutoCompleteDisplayMode): void;
    protected onLayoutModeChanged(oldValue: commonModule.AutoCompleteLayoutMode, newValue: commonModule.AutoCompleteLayoutMode): void;
    protected onSuggestModeChanged(oldValue: commonModule.AutoCompleteSuggestMode, newValue: commonModule.AutoCompleteSuggestMode): void;
    protected onCompletionModeChanged(oldValue: commonModule.AutoCompleteCompletionMode, newValue: commonModule.AutoCompleteCompletionMode): void;
    protected onItemsChanged(oldValue: ObservableArray<TokenModel>, newValue: ObservableArray<TokenModel>): void;
    protected onSuggestionViewChanged(oldValue: SuggestionView, newValue: SuggestionView): void;
    protected onHintChanged(oldValue: string, newValue: string): void;
    protected onTextChanged(oldValue: string, newValue: string): void;
    protected onMinimumCharactersToSearchChanged(oldValue: number, newValue: number): void;
    protected onTokenItemSpacingChanged(oldValue: number, newValue: number): void;
    protected onNoResultsTextChanged(oldValue: string, newValue: string): void;
    protected onLoadSuggestionsAsyncChanged(oldValue: any, newValue: any): void;
    protected onShowCloseButtonChanged(oldValue: boolean, newValue: boolean): void;
    protected onCloseButtonImageSrcChanged(oldValue: string, newValue: string): void;
    protected onReadOnlyChanged(oldValue: boolean, newValue: boolean): void;
    private adjustAsyncCall;
    private adjustHint;
    private adjustText;
    private adjustMinimumCharactersToSearch;
    private adjustTokenItemSpacing;
    private adjustNoResultsText;
    private adjustSuggestionView;
    private adjustCompletionMode;
    private adjustDisplayMode;
    private adjustSuggestMode;
    private adjustLayoutMode;
    private adjustShowCloseButton;
    private adjustCloseButtonImage;
    private adjustIsReadOnly;
    private loadData;
    static resolveDrawableFromResource(imageName: any): any;
}
export declare class Token extends commonModule.Token {
    private _android;
    private _clearButton;
    constructor(nativeView: any);
    createNativeView(): com.telerik.widget.autocomplete.TokenView;
    disposeNativeView(): void;
    readonly clearButton: TokenClearButton;
    eachChild(callback: (child: any) => boolean): void;
}
export declare class NoResultsLabel extends commonModule.NoResultsLabel {
    private _android;
    constructor(nativeView: any);
    createNativeView(): globalAndroid.widget.TextView;
    disposeNativeView(): void;
}
export declare class ClearButton extends commonModule.ClearButton {
    private _android;
    private _owner;
    constructor(nativeView: any);
    private resetStateListAnimator;
    createNativeView(): globalAndroid.widget.Button;
    disposeNativeView(): void;
}
export declare class TokenClearButton extends commonModule.TokenClearButton {
    private _android;
    private _token;
    constructor(token: com.telerik.widget.autocomplete.TokenView);
    createNativeView(): globalAndroid.widget.ImageView;
    disposeNativeView(): void;
}
